name: e2e

on:
  issue_comment:
    types: [created]

jobs:
  build:
    if: contains(github.event.issue.html_url, '/pull/') && startsWith(github.event.comment.body, '/ok-to-test')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1

      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Checkout pr
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.issue.number }}
        run: |
          curl -fsSL https://github.com/github/hub/raw/master/script/get | bash -s 2.14.1
          sudo mv bin/hub /usr/local/bin
          hub pr checkout $PR_NUMBER

      - name: Login Docker
        env:
          DOCKER_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          USERNAME: 1gtm
        run: |
          docker login --username ${USERNAME} --password ${DOCKER_TOKEN}

      - name: Build
        env:
          REGISTRY: kubedbci
        run: |
          make push

  config:
    runs-on: ubuntu-latest
    needs: build
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      e2e_ref: ${{ steps.set-matrix.outputs.e2e_ref }}
    steps:
      - uses: actions/checkout@v1

      - id: set-matrix
        name: Generate test matrix
        run: |
          ./hack/scripts/generate-kubedb-test-config.sh ${{ github.event.comment.body }}

  kubernetes:
    name: Kubernetes
    needs: config
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.config.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v1

      - name: Checkout pr
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.issue.number }}
        run: |
          curl -fsSL https://github.com/github/hub/raw/master/script/get | bash -s 2.14.1
          sudo mv bin/hub /usr/local/bin
          hub pr checkout $PR_NUMBER

      - name: Create Kubernetes ${{ matrix.k8s }} cluster
        id: kind
        uses: engineerd/setup-kind@v0.5.0
        with:
          version: v0.11.1
          config: hack/kubernetes/kind.yaml
          image: kindest/node:${{ matrix.k8s }}

      - name: Prepare cluster for testing
        id: local-path
        env:
          USERNAME: 1gtm
          REGISTRY_SECRET: regcred
          DOCKER_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          echo "waiting for nodes to be ready ..."
          kubectl wait --for=condition=Ready nodes --all --timeout=5m
          kubectl get nodes
          kubectl wait --for=condition=Ready pods -n kube-system --all --timeout=10m
          kubectl get pods -n kube-system
          echo
          echo "install helm 3"
          curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
          echo
          echo "create docker-registry secret"
          kubectl create secret docker-registry ${REGISTRY_SECRET} --namespace=kube-system --docker-server=https://index.docker.io/v1/ --docker-username=${USERNAME} --docker-password=${DOCKER_TOKEN}

      - name: Install cert-manager
        run: |
          kubectl create namespace cert-manager
          # ref: https://github.com/cloudflare/semver_bash/blob/master/semver.sh#L3
          RE='[^0-9]*\([0-9]*\)[.]\([0-9]*\)[.]\([0-9]*\)\([0-9A-Za-z-]*\)'
          eval MAJOR=`echo ${{ matrix.k8s }} | sed -e "s#$RE#\1#"`
          eval MINOR=`echo ${{ matrix.k8s }} | sed -e "s#$RE#\2#"`
          if [ $MAJOR -eq 1 ] && [ $MINOR -lt 15 ]; then
            kubectl apply --validate=false -f https://github.com/jetstack/cert-manager/releases/download/v1.4.1/cert-manager-legacy.yaml
          else
            kubectl apply --validate=false -f https://github.com/jetstack/cert-manager/releases/download/v1.4.1/cert-manager.yaml
          fi

      - name: Check out installer
        run: |
          cd ..
          git clone https://github.com/kubedb/installer.git
          cd installer
          git checkout master

      - name: Install stash and addons
        run: |
          make stash-install

      - name: Install operator
        env:
          REGISTRY: kubedbci
          REGISTRY_SECRET: regcred
          TEST_CREDENTIALS: ${{ secrets.TEST_CREDENTIALS }}
          GOOGLE_SERVICE_ACCOUNT_JSON_KEY: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_JSON_KEY }}
        run: |
          echo "preparing test credentials"
          mkdir -p hack/config
          echo -n "$TEST_CREDENTIALS" > hack/config/.env
          echo >> hack/config/.env
          echo "GOOGLE_SERVICE_ACCOUNT_JSON_KEY=$(echo $GOOGLE_SERVICE_ACCOUNT_JSON_KEY)" >> hack/config/.env
          make install

      - name: Run e2e tests
        env:
          REGISTRY: kubedbci
          REGISTRY_SECRET: regcred
          TEST_CREDENTIALS: ${{ secrets.TEST_CREDENTIALS }}
          GOOGLE_SERVICE_ACCOUNT_JSON_KEY: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_JSON_KEY }}
        run: |
          cd ..
          git clone https://github.com/kubedb/tests.git
          cd tests
          git checkout ${{ needs.config.outputs.e2e_ref }}
          echo "preparing test credentials"
          mkdir -p hack/config
          echo -n "$TEST_CREDENTIALS" > hack/config/.env
          echo >> hack/config/.env
          echo "GOOGLE_SERVICE_ACCOUNT_JSON_KEY=$(echo $GOOGLE_SERVICE_ACCOUNT_JSON_KEY)" >> hack/config/.env
          make e2e-tests GINKGO_ARGS="--flakeAttempts=2" TEST_ARGS="--db-type=${{ matrix.db }} --db-version=${{ matrix.version }} --test-profiles=${{ matrix.profiles }} --ssl=${{ matrix.ssl }}" || (kubectl describe deployment -n kube-system  -l 'app.kubernetes.io/name in (kubedb,kubedb-enterprise)'; kubectl logs -n kube-system -l 'app.kubernetes.io/name in (kubedb,kubedb-enterprise)'; kubectl describe deployment -n kube-system stash-operator; kubectl logs -n kube-system deployment/stash-operator operator; exit 1;)
