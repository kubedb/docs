apiVersion: meta.appscode.com/v1alpha1
kind: ResourceDescriptor
metadata:
  creationTimestamp: null
  labels:
    k8s.io/group: extensions
    k8s.io/kind: Ingress
    k8s.io/resource: ingresses
    k8s.io/version: v1beta1
  name: extensions-v1beta1-ingresses
spec:
  icons:
  - src: https://cdn.appscode.com/k8s/icons/extensions/ingresses.svg
    type: image/svg+xml
  - src: https://cdn.appscode.com/k8s/icons/extensions/ingresses.png
    type: image/png
  resource:
    group: extensions
    kind: Ingress
    name: ingresses
    scope: Namespaced
    version: v1beta1
  ui:
    editor:
      name: extensions-ingress-editor
      url: https://bundles.byte.builders/ui/
      version: v0.2.0
  validation:
    openAPIV3Schema:
      description: Ingress is a collection of rules that allow inbound connections
        to reach the endpoints defined by a backend. An Ingress can be configured
        to give services externally-reachable urls, load balance traffic, terminate
        SSL, offer name based virtual hosting etc. DEPRECATED - This group version
        of Ingress is deprecated by networking.k8s.io/v1beta1 Ingress. See the release
        notes for more information.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          properties:
            name:
              description: 'Name must be unique within a namespace. Is required when
                creating resources, although some resources may allow a client to
                request the generation of an appropriate name automatically. Name
                is primarily intended for creation idempotence and configuration definition.
                Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names'
              type: string
            namespace:
              description: "Namespace defines the space within which each name must
                be unique. An empty namespace is equivalent to the \"default\" namespace,
                but \"default\" is the canonical representation. Not all objects are
                required to be scoped to a namespace - the value of this field for
                those objects will be empty. \n Must be a DNS_LABEL. Cannot be updated.
                More info: http://kubernetes.io/docs/user-guide/namespaces"
              type: string
            labels:
              additionalProperties:
                type: string
              description: 'Map of string keys and values that can be used to organize
                and categorize (scope and select) objects. May match selectors of
                replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels'
              type: object
            annotations:
              additionalProperties:
                type: string
              description: 'Annotations is an unstructured key value map stored with
                a resource that may be set by external tools to store and retrieve
                arbitrary metadata. They are not queryable and should be preserved
                when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations'
              type: object
          type: object
        spec:
          description: 'Spec is the desired state of the Ingress. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status'
          properties:
            backend:
              description: A default backend capable of servicing requests that don't
                match any rule. At least one of 'backend' or 'rules' must be specified.
                This field is optional to allow the loadbalancer controller or defaulting
                logic to specify a global default.
              properties:
                resource:
                  description: Resource is an ObjectRef to another Kubernetes resource
                    in the namespace of the Ingress object. If resource is specified,
                    serviceName and servicePort must not be specified.
                  properties:
                    apiGroup:
                      description: APIGroup is the group for the resource being referenced.
                        If APIGroup is not specified, the specified Kind must be in
                        the core API group. For any other third-party types, APIGroup
                        is required.
                      type: string
                    kind:
                      description: Kind is the type of resource being referenced
                      type: string
                    name:
                      description: Name is the name of resource being referenced
                      type: string
                  required:
                  - kind
                  - name
                  type: object
                serviceName:
                  description: Specifies the name of the referenced service.
                  type: string
                servicePort:
                  anyOf:
                  - type: integer
                  - type: string
                  description: Specifies the port of the referenced service.
                  x-kubernetes-int-or-string: true
              type: object
            ingressClassName:
              description: IngressClassName is the name of the IngressClass cluster
                resource. The associated IngressClass defines which controller will
                implement the resource. This replaces the deprecated `kubernetes.io/ingress.class`
                annotation. For backwards compatibility, when that annotation is set,
                it must be given precedence over this field. The controller may emit
                a warning if the field and annotation have different values. Implementations
                of this API should ignore Ingresses without a class specified. An
                IngressClass resource may be marked as default, which can be used
                to set a default value for this field. For more information, refer
                to the IngressClass documentation.
              type: string
            rules:
              description: A list of host rules used to configure the Ingress. If
                unspecified, or no rule matches, all traffic is sent to the default
                backend.
              items:
                description: IngressRule represents the rules mapping the paths under
                  a specified host to the related backend services. Incoming requests
                  are first evaluated for a host match, then routed to the backend
                  associated with the matching IngressRuleValue.
                properties:
                  host:
                    description: "Host is the fully qualified domain name of a network
                      host, as defined by RFC 3986. Note the following deviations
                      from the \"host\" part of the URI as defined in RFC 3986: 1.
                      IPs are not allowed. Currently an IngressRuleValue can only
                      apply to    the IP in the Spec of the parent Ingress. 2. The
                      `:` delimiter is not respected because ports are not allowed.
                      \t  Currently the port of an Ingress is implicitly :80 for http
                      and \t  :443 for https. Both these may change in the future.
                      Incoming requests are matched against the host before the IngressRuleValue.
                      If the host is unspecified, the Ingress routes all traffic based
                      on the specified IngressRuleValue. \n Host can be \"precise\"
                      which is a domain name without the terminating dot of a network
                      host (e.g. \"foo.bar.com\") or \"wildcard\", which is a domain
                      name prefixed with a single wildcard label (e.g. \"*.foo.com\").
                      The wildcard character '*' must appear by itself as the first
                      DNS label and matches only a single label. You cannot have a
                      wildcard label by itself (e.g. Host == \"*\"). Requests will
                      be matched against the Host field in the following way: 1. If
                      Host is precise, the request matches this rule if the http host
                      header is equal to Host. 2. If Host is a wildcard, then the
                      request matches this rule if the http host header is to equal
                      to the suffix (removing the first label) of the wildcard rule."
                    type: string
                  http:
                    description: 'HTTPIngressRuleValue is a list of http selectors
                      pointing to backends. In the example: http://<host>/<path>?<searchpart>
                      -> backend where where parts of the url correspond to RFC 3986,
                      this resource will be used to match against everything after
                      the last ''/'' and before the first ''?'' or ''#''.'
                    properties:
                      paths:
                        description: A collection of paths that map requests to backends.
                        items:
                          description: HTTPIngressPath associates a path with a backend.
                            Incoming urls matching the path are forwarded to the backend.
                          properties:
                            backend:
                              description: Backend defines the referenced service
                                endpoint to which the traffic will be forwarded to.
                              properties:
                                resource:
                                  description: Resource is an ObjectRef to another
                                    Kubernetes resource in the namespace of the Ingress
                                    object. If resource is specified, serviceName
                                    and servicePort must not be specified.
                                  properties:
                                    apiGroup:
                                      description: APIGroup is the group for the resource
                                        being referenced. If APIGroup is not specified,
                                        the specified Kind must be in the core API
                                        group. For any other third-party types, APIGroup
                                        is required.
                                      type: string
                                    kind:
                                      description: Kind is the type of resource being
                                        referenced
                                      type: string
                                    name:
                                      description: Name is the name of resource being
                                        referenced
                                      type: string
                                  required:
                                  - kind
                                  - name
                                  type: object
                                serviceName:
                                  description: Specifies the name of the referenced
                                    service.
                                  type: string
                                servicePort:
                                  anyOf:
                                  - type: integer
                                  - type: string
                                  description: Specifies the port of the referenced
                                    service.
                                  x-kubernetes-int-or-string: true
                              type: object
                            path:
                              description: Path is matched against the path of an
                                incoming request. Currently it can contain characters
                                disallowed from the conventional "path" part of a
                                URL as defined by RFC 3986. Paths must begin with
                                a '/'. When unspecified, all paths from incoming requests
                                are matched.
                              type: string
                            pathType:
                              description: 'PathType determines the interpretation
                                of the Path matching. PathType can be one of the following
                                values: * Exact: Matches the URL path exactly. * Prefix:
                                Matches based on a URL path prefix split by ''/''.
                                Matching is   done on a path element by element basis.
                                A path element refers is the   list of labels in the
                                path split by the ''/'' separator. A request is a   match
                                for path p if every p is an element-wise prefix of
                                p of the   request path. Note that if the last element
                                of the path is a substring   of the last element in
                                request path, it is not a match (e.g. /foo/bar   matches
                                /foo/bar/baz, but does not match /foo/barbaz). * ImplementationSpecific:
                                Interpretation of the Path matching is up to   the
                                IngressClass. Implementations can treat this as a
                                separate PathType   or treat it identically to Prefix
                                or Exact path types. Implementations are required
                                to support all path types. Defaults to ImplementationSpecific.'
                              type: string
                          required:
                          - backend
                          type: object
                        type: array
                    required:
                    - paths
                    type: object
                type: object
              type: array
            tls:
              description: TLS configuration. Currently the Ingress only supports
                a single TLS port, 443. If multiple members of this list specify different
                hosts, they will be multiplexed on the same port according to the
                hostname specified through the SNI TLS extension, if the ingress controller
                fulfilling the ingress supports SNI.
              items:
                description: IngressTLS describes the transport layer security associated
                  with an Ingress.
                properties:
                  hosts:
                    description: Hosts are a list of hosts included in the TLS certificate.
                      The values in this list must match the name/s used in the tlsSecret.
                      Defaults to the wildcard host setting for the loadbalancer controller
                      fulfilling this Ingress, if left unspecified.
                    items:
                      type: string
                    type: array
                  secretName:
                    description: SecretName is the name of the secret used to terminate
                      SSL traffic on 443. Field is left optional to allow SSL routing
                      based on SNI hostname alone. If the SNI host in a listener conflicts
                      with the "Host" header field used by an IngressRule, the SNI
                      host is used for termination and value of the Host header is
                      used for routing.
                    type: string
                type: object
              type: array
          type: object
      type: object
