apiVersion: meta.appscode.com/v1alpha1
kind: ResourceDescriptor
metadata:
  creationTimestamp: null
  labels:
    k8s.io/group: cert-manager.io
    k8s.io/kind: Certificate
    k8s.io/resource: certificates
    k8s.io/version: v1
  name: cert-manager.io-v1-certificates
spec:
  columns:
  - name: Name
    pathTemplate: '{{ jp "{.metadata.name}" . }}'
    priority: 3
    type: string
  - name: Namespace
    pathTemplate: '{{ jp "{.metadata.namespace}" . }}'
    priority: 3
    type: string
  - name: Labels
    pathTemplate: '{{ jp "{.metadata.labels}" . }}'
    priority: 3
    type: object
  - name: Annotations
    pathTemplate: '{{ jp "{.metadata.annotations}" . }}'
    priority: 1
    type: object
  - name: CN
    pathTemplate: '{{ jp "{.spec.commonName}" . }}'
    priority: 3
    type: string
  - name: Issuer Kind
    pathTemplate: '{{ jp "{.spec.issuerRef.kind}" . }}'
    priority: 3
    type: string
  - name: Issuer Name
    pathTemplate: '{{ jp "{.spec.issuerRef.name}" . }}'
    priority: 3
    type: string
  - name: Secret Name
    pathTemplate: '{{ jp "{.spec.secretName}" . }}'
    priority: 3
    type: string
  - name: Validity
    pathTemplate: '{{ jp "{.status}" . | cert_validity }}'
    priority: 3
    type: string
  - name: Renewal Date
    pathTemplate: '{{ jp "{.status.renewalTime}" . }}'
    priority: 3
    type: string
  - name: Age
    pathTemplate: '{{ jp "{.metadata.creationTimestamp}" . }}'
    priority: 3
    type: date
  connections:
  - namespacePath: metadata.namespace
    references:
    - '{.spec.issuerRef.name},{.metadata.namespace}'
    target:
      apiVersion: cert-manager.io/v1
      kind: Issuer
    type: MatchRef
  - references:
    - '{.spec.issuerRef.name}'
    target:
      apiVersion: cert-manager.io/v1
      kind: ClusterIssuer
    type: MatchRef
  icons:
  - src: https://cdn.appscode.com/k8s/icons/cert-manager.io/certificates.svg
    type: image/svg+xml
  - src: https://cdn.appscode.com/k8s/icons/cert-manager.io/certificates.png
    type: image/png
  installer:
    chart:
      name: cert-manager
      url: https://charts.jetstack.io
      version: ""
  resource:
    group: cert-manager.io
    kind: Certificate
    name: certificates
    scope: Namespaced
    version: v1
  subTables:
  - columns:
    - name: Type
      pathTemplate: '{{ jp "{.type}" . }}'
      priority: 0
      type: string
    - name: Status
      pathTemplate: '{{ jp "{.status}" . }}'
      priority: 0
      type: string
    - name: Reason
      pathTemplate: '{{ jp "{.reason}" . }}'
      priority: 0
      type: string
    - name: Last Transition Time
      pathTemplate: '{{ jp "{.lastTransitionTime}" . }}'
      priority: 0
      type: date
    - name: Message
      pathTemplate: '{{ jp "{.message}" . }}'
      priority: 0
      type: string
    fieldPath: .status.conditions
    name: Conditions
  ui:
    editor:
      name: certmanagerio-certificate-editor
      url: https://bundles.byte.builders/ui/
      version: v0.2.0
  validation:
    openAPIV3Schema:
      description: "A Certificate resource should be created to ensure an up to date
        and signed x509 certificate is stored in the Kubernetes Secret resource named
        in `spec.secretName`. \n The stored certificate will be renewed before it
        expires (as configured by `spec.renewBefore`)."
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          properties:
            name:
              description: 'Name must be unique within a namespace. Is required when
                creating resources, although some resources may allow a client to
                request the generation of an appropriate name automatically. Name
                is primarily intended for creation idempotence and configuration definition.
                Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names'
              type: string
            namespace:
              description: "Namespace defines the space within which each name must
                be unique. An empty namespace is equivalent to the \"default\" namespace,
                but \"default\" is the canonical representation. Not all objects are
                required to be scoped to a namespace - the value of this field for
                those objects will be empty. \n Must be a DNS_LABEL. Cannot be updated.
                More info: http://kubernetes.io/docs/user-guide/namespaces"
              type: string
            labels:
              additionalProperties:
                type: string
              description: 'Map of string keys and values that can be used to organize
                and categorize (scope and select) objects. May match selectors of
                replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels'
              type: object
            annotations:
              additionalProperties:
                type: string
              description: 'Annotations is an unstructured key value map stored with
                a resource that may be set by external tools to store and retrieve
                arbitrary metadata. They are not queryable and should be preserved
                when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations'
              type: object
          type: object
        spec:
          description: Desired state of the Certificate resource.
          properties:
            commonName:
              description: 'CommonName is a common name to be used on the Certificate.
                The CommonName should have a length of 64 characters or fewer to avoid
                generating invalid CSRs. This value is ignored by TLS clients when
                any subject alt name is set. This is x509 behaviour: https://tools.ietf.org/html/rfc6125#section-6.4.4'
              type: string
            dnsNames:
              description: DNSNames is a list of DNS subjectAltNames to be set on
                the Certificate.
              items:
                type: string
              type: array
            duration:
              description: The requested 'duration' (i.e. lifetime) of the Certificate.
                This option may be ignored/overridden by some issuer types. If unset
                this defaults to 90 days. If overridden and `renewBefore` is greater
                than the actual certificate duration, the certificate will be automatically
                renewed 2/3rds of the way through the certificate's duration.
              type: string
            emailAddresses:
              description: EmailAddresses is a list of email subjectAltNames to be
                set on the Certificate.
              items:
                type: string
              type: array
            encodeUsagesInRequest:
              description: EncodeUsagesInRequest controls whether key usages should
                be present in the CertificateRequest
              type: boolean
            ipAddresses:
              description: IPAddresses is a list of IP address subjectAltNames to
                be set on the Certificate.
              items:
                type: string
              type: array
            isCA:
              description: IsCA will mark this Certificate as valid for certificate
                signing. This will automatically add the `cert sign` usage to the
                list of `usages`.
              type: boolean
            issuerRef:
              description: IssuerRef is a reference to the issuer for this certificate.
                If the `kind` field is not set, or set to `Issuer`, an Issuer resource
                with the given name in the same namespace as the Certificate will
                be used. If the `kind` field is set to `ClusterIssuer`, a ClusterIssuer
                with the provided name will be used. The `name` field in this stanza
                is required at all times.
              properties:
                group:
                  description: Group of the resource being referred to.
                  type: string
                kind:
                  description: Kind of the resource being referred to.
                  type: string
                name:
                  description: Name of the resource being referred to.
                  type: string
              required:
              - name
              type: object
            keystores:
              description: Keystores configures additional keystore output formats
                stored in the `secretName` Secret resource.
              properties:
                jks:
                  description: JKS configures options for storing a JKS keystore in
                    the `spec.secretName` Secret resource.
                  properties:
                    create:
                      description: Create enables JKS keystore creation for the Certificate.
                        If true, a file named `keystore.jks` will be created in the
                        target Secret resource, encrypted using the password stored
                        in `passwordSecretRef`. The keystore file will only be updated
                        upon re-issuance. A file named `truststore.jks` will also
                        be created in the target Secret resource, encrypted using
                        the password stored in `passwordSecretRef` containing the
                        issuing Certificate Authority
                      type: boolean
                    passwordSecretRef:
                      description: PasswordSecretRef is a reference to a key in a
                        Secret resource containing the password used to encrypt the
                        JKS keystore.
                      properties:
                        key:
                          description: The key of the entry in the Secret resource's
                            `data` field to be used. Some instances of this field
                            may be defaulted, in others it may be required.
                          type: string
                        name:
                          description: 'Name of the resource being referred to. More
                            info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          type: string
                      required:
                      - name
                      type: object
                  required:
                  - create
                  - passwordSecretRef
                  type: object
                pkcs12:
                  description: PKCS12 configures options for storing a PKCS12 keystore
                    in the `spec.secretName` Secret resource.
                  properties:
                    create:
                      description: Create enables PKCS12 keystore creation for the
                        Certificate. If true, a file named `keystore.p12` will be
                        created in the target Secret resource, encrypted using the
                        password stored in `passwordSecretRef`. The keystore file
                        will only be updated upon re-issuance. A file named `truststore.p12`
                        will also be created in the target Secret resource, encrypted
                        using the password stored in `passwordSecretRef` containing
                        the issuing Certificate Authority
                      type: boolean
                    passwordSecretRef:
                      description: PasswordSecretRef is a reference to a key in a
                        Secret resource containing the password used to encrypt the
                        PKCS12 keystore.
                      properties:
                        key:
                          description: The key of the entry in the Secret resource's
                            `data` field to be used. Some instances of this field
                            may be defaulted, in others it may be required.
                          type: string
                        name:
                          description: 'Name of the resource being referred to. More
                            info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          type: string
                      required:
                      - name
                      type: object
                  required:
                  - create
                  - passwordSecretRef
                  type: object
              type: object
            privateKey:
              description: Options to control private keys used for the Certificate.
              properties:
                algorithm:
                  description: Algorithm is the private key algorithm of the corresponding
                    private key for this certificate. If provided, allowed values
                    are either `RSA` or `ECDSA` If `algorithm` is specified and `size`
                    is not provided, key size of 256 will be used for `ECDSA` key
                    algorithm and key size of 2048 will be used for `RSA` key algorithm.
                  enum:
                  - RSA
                  - ECDSA
                  type: string
                encoding:
                  description: The private key cryptography standards (PKCS) encoding
                    for this certificate's private key to be encoded in. If provided,
                    allowed values are `PKCS1` and `PKCS8` standing for PKCS#1 and
                    PKCS#8, respectively. Defaults to `PKCS1` if not specified.
                  enum:
                  - PKCS1
                  - PKCS8
                  type: string
                rotationPolicy:
                  description: RotationPolicy controls how private keys should be
                    regenerated when a re-issuance is being processed. If set to Never,
                    a private key will only be generated if one does not already exist
                    in the target `spec.secretName`. If one does exists but it does
                    not have the correct algorithm or size, a warning will be raised
                    to await user intervention. If set to Always, a private key matching
                    the specified requirements will be generated whenever a re-issuance
                    occurs. Default is 'Never' for backward compatibility.
                  type: string
                size:
                  description: Size is the key bit size of the corresponding private
                    key for this certificate. If `algorithm` is set to `RSA`, valid
                    values are `2048`, `4096` or `8192`, and will default to `2048`
                    if not specified. If `algorithm` is set to `ECDSA`, valid values
                    are `256`, `384` or `521`, and will default to `256` if not specified.
                    No other values are allowed.
                  type: integer
              type: object
            renewBefore:
              description: The amount of time before the currently issued certificate's
                `notAfter` time that cert-manager will begin to attempt to renew the
                certificate. If unset this defaults to 30 days. If this value is greater
                than the total duration of the certificate (i.e. notAfter - notBefore),
                it will be automatically renewed 2/3rds of the way through the certificate's
                duration.
              type: string
            revisionHistoryLimit:
              description: revisionHistoryLimit is the maximum number of CertificateRequest
                revisions that are maintained in the Certificate's history. Each revision
                represents a single `CertificateRequest` created by this Certificate,
                either when it was created, renewed, or Spec was changed. Revisions
                will be removed by oldest first if the number of revisions exceeds
                this number. If set, revisionHistoryLimit must be a value of `1` or
                greater. If unset (`nil`), revisions will not be garbage collected.
                Default value is `nil`.
              format: int32
              type: integer
            secretName:
              description: SecretName is the name of the secret resource that will
                be automatically created and managed by this Certificate resource.
                It will be populated with a private key and certificate, signed by
                the denoted issuer.
              type: string
            subject:
              description: Full X509 name specification (https://golang.org/pkg/crypto/x509/pkix/#Name).
              properties:
                countries:
                  description: Countries to be used on the Certificate.
                  items:
                    type: string
                  type: array
                localities:
                  description: Cities to be used on the Certificate.
                  items:
                    type: string
                  type: array
                organizationalUnits:
                  description: Organizational Units to be used on the Certificate.
                  items:
                    type: string
                  type: array
                organizations:
                  description: Organizations to be used on the Certificate.
                  items:
                    type: string
                  type: array
                postalCodes:
                  description: Postal codes to be used on the Certificate.
                  items:
                    type: string
                  type: array
                provinces:
                  description: State/Provinces to be used on the Certificate.
                  items:
                    type: string
                  type: array
                serialNumber:
                  description: Serial number to be used on the Certificate.
                  type: string
                streetAddresses:
                  description: Street addresses to be used on the Certificate.
                  items:
                    type: string
                  type: array
              type: object
            uris:
              description: URIs is a list of URI subjectAltNames to be set on the
                Certificate.
              items:
                type: string
              type: array
            usages:
              description: Usages is the set of x509 usages that are requested for
                the certificate. Defaults to `digital signature` and `key encipherment`
                if not specified.
              items:
                description: 'KeyUsage specifies valid usage contexts for keys. See:
                  https://tools.ietf.org/html/rfc5280#section-4.2.1.3      https://tools.ietf.org/html/rfc5280#section-4.2.1.12
                  Valid KeyUsage values are as follows: "signing", "digital signature",
                  "content commitment", "key encipherment", "key agreement", "data
                  encipherment", "cert sign", "crl sign", "encipher only", "decipher
                  only", "any", "server auth", "client auth", "code signing", "email
                  protection", "s/mime", "ipsec end system", "ipsec tunnel", "ipsec
                  user", "timestamping", "ocsp signing", "microsoft sgc", "netscape
                  sgc"'
                enum:
                - signing
                - digital signature
                - content commitment
                - key encipherment
                - key agreement
                - data encipherment
                - cert sign
                - crl sign
                - encipher only
                - decipher only
                - any
                - server auth
                - client auth
                - code signing
                - email protection
                - s/mime
                - ipsec end system
                - ipsec tunnel
                - ipsec user
                - timestamping
                - ocsp signing
                - microsoft sgc
                - netscape sgc
                type: string
              type: array
          required:
          - issuerRef
          - secretName
          type: object
      required:
      - spec
      type: object
