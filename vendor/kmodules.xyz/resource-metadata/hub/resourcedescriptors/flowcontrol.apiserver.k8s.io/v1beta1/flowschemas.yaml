apiVersion: meta.appscode.com/v1alpha1
kind: ResourceDescriptor
metadata:
  creationTimestamp: null
  labels:
    k8s.io/group: flowcontrol.apiserver.k8s.io
    k8s.io/kind: FlowSchema
    k8s.io/resource: flowschemas
    k8s.io/version: v1beta1
  name: flowcontrol.apiserver.k8s.io-v1beta1-flowschemas
spec:
  resource:
    group: flowcontrol.apiserver.k8s.io
    kind: FlowSchema
    name: flowschemas
    scope: Namespaced
    version: v1beta1
  resourceRequirements:
  - resources: spec.podTemplate.spec.resources
    units: spec.replicas
  ui:
    editor:
      name: flowcontrolapiserverk8sio-flowschema-editor
      url: https://raw.githubusercontent.com/bytebuilders/ui-wizards/master/stable
      version: v0.2.0-alpha.0
  validation:
    openAPIV3Schema:
      description: 'FlowSchema defines the schema of a group of flows. Note that a flow is made up of a set of inbound API requests with similar attributes and is identified by a pair of strings: the name of the FlowSchema and a "flow distinguisher".'
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          properties:
            name:
              description: 'Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names'
              type: string
            namespace:
              description: "Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. \n Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces"
              type: string
            labels:
              additionalProperties:
                type: string
              description: 'Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels'
              type: object
            annotations:
              additionalProperties:
                type: string
              description: 'Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations'
              type: object
          type: object
        spec:
          description: '`spec` is the specification of the desired behavior of a FlowSchema. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status'
          properties:
            distinguisherMethod:
              description: '`distinguisherMethod` defines how to compute the flow distinguisher for requests that match this schema. `nil` specifies that the distinguisher is disabled and thus will always be the empty string.'
              properties:
                type:
                  description: '`type` is the type of flow distinguisher method The supported types are "ByUser" and "ByNamespace". Required.'
                  type: string
              required:
              - type
              type: object
            matchingPrecedence:
              description: '`matchingPrecedence` is used to choose among the FlowSchemas that match a given request. The chosen FlowSchema is among those with the numerically lowest (which we take to be logically highest) MatchingPrecedence.  Each MatchingPrecedence value must be ranged in [1,10000]. Note that if the precedence is not specified, it will be set to 1000 as default.'
              format: int32
              type: integer
            priorityLevelConfiguration:
              description: '`priorityLevelConfiguration` should reference a PriorityLevelConfiguration in the cluster. If the reference cannot be resolved, the FlowSchema will be ignored and marked as invalid in its status. Required.'
              properties:
                name:
                  description: '`name` is the name of the priority level configuration being referenced Required.'
                  type: string
              required:
              - name
              type: object
            rules:
              description: '`rules` describes which requests will match this flow schema. This FlowSchema matches a request if and only if at least one member of rules matches the request. if it is an empty slice, there will be no requests matching the FlowSchema.'
              items:
                description: PolicyRulesWithSubjects prescribes a test that applies to a request to an apiserver. The test considers the subject making the request, the verb being requested, and the resource to be acted upon. This PolicyRulesWithSubjects matches a request if and only if both (a) at least one member of subjects matches the request and (b) at least one member of resourceRules or nonResourceRules matches the request.
                properties:
                  nonResourceRules:
                    description: '`nonResourceRules` is a list of NonResourcePolicyRules that identify matching requests according to their verb and the target non-resource URL.'
                    items:
                      description: NonResourcePolicyRule is a predicate that matches non-resource requests according to their verb and the target non-resource URL. A NonResourcePolicyRule matches a request if and only if both (a) at least one member of verbs matches the request and (b) at least one member of nonResourceURLs matches the request.
                      properties:
                        nonResourceURLs:
                          description: '`nonResourceURLs` is a set of url prefixes that a user should have access to and may not be empty. For example:   - "/healthz" is legal   - "/hea*" is illegal   - "/hea" is legal but matches nothing   - "/hea/*" also matches nothing   - "/healthz/*" matches all per-component health checks. "*" matches all non-resource urls. if it is present, it must be the only entry. Required.'
                          items:
                            type: string
                          type: array
                          x-kubernetes-list-type: set
                        verbs:
                          description: '`verbs` is a list of matching verbs and may not be empty. "*" matches all verbs. If it is present, it must be the only entry. Required.'
                          items:
                            type: string
                          type: array
                          x-kubernetes-list-type: set
                      required:
                      - nonResourceURLs
                      - verbs
                      type: object
                    type: array
                    x-kubernetes-list-type: atomic
                  resourceRules:
                    description: '`resourceRules` is a slice of ResourcePolicyRules that identify matching requests according to their verb and the target resource. At least one of `resourceRules` and `nonResourceRules` has to be non-empty.'
                    items:
                      description: 'ResourcePolicyRule is a predicate that matches some resource requests, testing the request''s verb and the target resource. A ResourcePolicyRule matches a resource request if and only if: (a) at least one member of verbs matches the request, (b) at least one member of apiGroups matches the request, (c) at least one member of resources matches the request, and (d) least one member of namespaces matches the request.'
                      properties:
                        apiGroups:
                          description: '`apiGroups` is a list of matching API groups and may not be empty. "*" matches all API groups and, if present, must be the only entry. Required.'
                          items:
                            type: string
                          type: array
                          x-kubernetes-list-type: set
                        clusterScope:
                          description: '`clusterScope` indicates whether to match requests that do not specify a namespace (which happens either because the resource is not namespaced or the request targets all namespaces). If this field is omitted or false then the `namespaces` field must contain a non-empty list.'
                          type: boolean
                        namespaces:
                          description: '`namespaces` is a list of target namespaces that restricts matches.  A request that specifies a target namespace matches only if either (a) this list contains that target namespace or (b) this list contains "*".  Note that "*" matches any specified namespace but does not match a request that _does not specify_ a namespace (see the `clusterScope` field for that). This list may be empty, but only if `clusterScope` is true.'
                          items:
                            type: string
                          type: array
                          x-kubernetes-list-type: set
                        resources:
                          description: '`resources` is a list of matching resources (i.e., lowercase and plural) with, if desired, subresource.  For example, [ "services", "nodes/status" ].  This list may not be empty. "*" matches all resources and, if present, must be the only entry. Required.'
                          items:
                            type: string
                          type: array
                          x-kubernetes-list-type: set
                        verbs:
                          description: '`verbs` is a list of matching verbs and may not be empty. "*" matches all verbs and, if present, must be the only entry. Required.'
                          items:
                            type: string
                          type: array
                          x-kubernetes-list-type: set
                      required:
                      - apiGroups
                      - resources
                      - verbs
                      type: object
                    type: array
                    x-kubernetes-list-type: atomic
                  subjects:
                    description: subjects is the list of normal user, serviceaccount, or group that this rule cares about. There must be at least one member in this slice. A slice that includes both the system:authenticated and system:unauthenticated user groups matches every request. Required.
                    items:
                      description: Subject matches the originator of a request, as identified by the request authentication system. There are three ways of matching an originator; by user, group, or service account.
                      properties:
                        group:
                          description: GroupSubject holds detailed information for group-kind subject.
                          properties:
                            name:
                              description: name is the user group that matches, or "*" to match all user groups. See https://github.com/kubernetes/apiserver/blob/master/pkg/authentication/user/user.go for some well-known group names. Required.
                              type: string
                          required:
                          - name
                          type: object
                        kind:
                          description: Required
                          type: string
                        serviceAccount:
                          description: ServiceAccountSubject holds detailed information for service-account-kind subject.
                          properties:
                            name:
                              description: '`name` is the name of matching ServiceAccount objects, or "*" to match regardless of name. Required.'
                              type: string
                            namespace:
                              description: '`namespace` is the namespace of matching ServiceAccount objects. Required.'
                              type: string
                          required:
                          - name
                          - namespace
                          type: object
                        user:
                          description: UserSubject holds detailed information for user-kind subject.
                          properties:
                            name:
                              description: '`name` is the username that matches, or "*" to match all usernames. Required.'
                              type: string
                          required:
                          - name
                          type: object
                      required:
                      - kind
                      type: object
                    type: array
                    x-kubernetes-list-type: atomic
                required:
                - subjects
                type: object
              type: array
              x-kubernetes-list-type: atomic
          required:
          - priorityLevelConfiguration
          type: object
      type: object
