apiVersion: meta.appscode.com/v1alpha1
kind: ResourceDescriptor
metadata:
  creationTimestamp: null
  labels:
    k8s.io/group: policy.kubevault.com
    k8s.io/kind: VaultPolicyBinding
    k8s.io/resource: vaultpolicybindings
    k8s.io/version: v1alpha1
  name: policy.kubevault.com-v1alpha1-vaultpolicybindings
spec:
  icons:
  - src: https://cdn.appscode.com/k8s/icons/policy.kubevault.com/vaultpolicybindings.svg
    type: image/svg+xml
  - src: https://cdn.appscode.com/k8s/icons/policy.kubevault.com/vaultpolicybindings.png
    type: image/png
  resource:
    group: policy.kubevault.com
    kind: VaultPolicyBinding
    name: vaultpolicybindings
    scope: Namespaced
    version: v1alpha1
  ui:
    editor:
      name: policykubevaultcom-vaultpolicybinding-editor
      url: https://bundles.byte.builders/ui/
      version: v0.2.0
  validation:
    openAPIV3Schema:
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          properties:
            name:
              description: 'Name must be unique within a namespace. Is required when
                creating resources, although some resources may allow a client to
                request the generation of an appropriate name automatically. Name
                is primarily intended for creation idempotence and configuration definition.
                Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names'
              type: string
            namespace:
              description: "Namespace defines the space within which each name must
                be unique. An empty namespace is equivalent to the \"default\" namespace,
                but \"default\" is the canonical representation. Not all objects are
                required to be scoped to a namespace - the value of this field for
                those objects will be empty. \n Must be a DNS_LABEL. Cannot be updated.
                More info: http://kubernetes.io/docs/user-guide/namespaces"
              type: string
            labels:
              additionalProperties:
                type: string
              description: 'Map of string keys and values that can be used to organize
                and categorize (scope and select) objects. May match selectors of
                replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels'
              type: object
            annotations:
              additionalProperties:
                type: string
              description: 'Annotations is an unstructured key value map stored with
                a resource that may be set by external tools to store and retrieve
                arbitrary metadata. They are not queryable and should be preserved
                when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations'
              type: object
          type: object
        spec:
          description: 'links: https://www.vaultproject.io/api/auth/kubernetes/index.html#parameters-1'
          properties:
            policies:
              description: Policies is a list of Vault policy identifiers.
              items:
                properties:
                  name:
                    description: 'Name is a Vault server policy name. This name should
                      be returned by `vault read sys/policy` command. More info: https://www.vaultproject.io/docs/concepts/policies.html#listing-policies'
                    type: string
                  ref:
                    description: 'Ref is name of a VaultPolicy crd object. Actual
                      vault policy name is spec.vaultRoleName field. More info: https://www.vaultproject.io/docs/concepts/policies.html#listing-policies'
                    type: string
                type: object
              type: array
            subjectRef:
              description: SubjectRef refers to Vault users who will be granted policies.
              properties:
                appRole:
                  description: 'More info: https://www.vaultproject.io/docs/auth/approle#configuration'
                  properties:
                    bindSecretID:
                      description: Require secret_id to be presented when logging
                        in using this AppRole.
                      type: boolean
                    enableLocalSecretIds:
                      description: If set, the secret IDs generated using this role
                        will be cluster local. This can only be set during role creation
                        and once set, it can't be reset later.
                      type: boolean
                    path:
                      description: 'Specifies the path where approle auth is enabled
                        default : approle'
                      type: string
                    roleName:
                      description: 'RoleName is the Name of the AppRole This defaults
                        to following format: k8s.${cluster}.${metadata.namespace}.${metadata.name}'
                      type: string
                    secretIdBoundCidrs:
                      description: List of CIDR blocks; if set, specifies blocks of
                        IP addresses which can perform the login operation.
                      items:
                        type: string
                      type: array
                    secretIdNumUses:
                      description: Number of times any particular SecretID can be
                        used to fetch a token from this AppRole, after which the SecretID
                        will expire. A value of zero will allow unlimited uses.
                      format: int64
                      type: integer
                    secretIdTTL:
                      description: Duration in either an integer number of seconds
                        (3600) or an integer time unit (60m) after which any SecretID
                        expires.
                      type: string
                    tokenBoundCidrs:
                      description: List of CIDR blocks; if set, specifies blocks of
                        IP addresses which can authenticate successfully, and ties
                        the resulting token to these blocks as well.
                      items:
                        type: string
                      type: array
                    tokenExplicitMaxTTL:
                      description: If set, will encode an explicit max TTL onto the
                        token. This is a hard cap even if token_ttl and token_max_ttl
                        would otherwise allow a renewal.
                      format: int64
                      type: integer
                    tokenMaxTTL:
                      description: The maximum lifetime for generated tokens. This
                        current value of this will be referenced at renewal time.
                      format: int64
                      type: integer
                    tokenNoDefaultPolicy:
                      description: If set, the default policy will not be set on generated
                        tokens; otherwise it will be added to the policies set in
                        token_policies.
                      type: boolean
                    tokenNumUses:
                      description: The maximum number of times a generated token may
                        be used (within its lifetime); 0 means unlimited.
                      format: int64
                      type: integer
                    tokenPeriod:
                      description: The period, if any, to set on the token.
                      format: int64
                      type: integer
                    tokenPolicies:
                      description: List of policies to encode onto generated tokens.
                        Depending on the auth method, this list may be supplemented
                        by user/group/other values.
                      items:
                        type: string
                      type: array
                    tokenTTL:
                      description: The incremental lifetime for generated tokens.
                        This current value of this will be referenced at renewal time.
                      format: int64
                      type: integer
                    tokenType:
                      description: 'The type of token that should be generated. Can
                        be service, batch, or default to use the mount''s tuned default
                        (which unless changed will be service tokens). For token store
                        roles, there are two additional possibilities: default-service
                        and default-batch which specify the type to return unless
                        the client requests a different type at generation time.'
                      type: string
                  required:
                  - bindSecretID
                  type: object
                jwt:
                  description: 'More info: https://www.vaultproject.io/api-docs/auth/jwt#configure'
                  properties:
                    allowedRedirectUris:
                      description: The list of allowed values for redirect_uri during
                        OIDC logins.
                      items:
                        type: string
                      type: array
                    boundAudiences:
                      description: List of aud claims to match against. Any match
                        is sufficient. Required for "jwt" roles, optional for "oidc"
                        roles.
                      items:
                        type: string
                      type: array
                    boundClaims:
                      additionalProperties:
                        type: string
                      description: If set, a map of claims/values to match against.
                        The expected value may be a single string or a list of strings.
                        The interpretation of the bound claim values is configured
                        with bound_claims_type.
                      type: object
                    boundClaimsType:
                      description: Configures the interpretation of the bound_claims
                        values. If "string" (the default), the values will treated
                        as string literals and must match exactly. If set to "glob",
                        the values will be interpreted as globs, with * matching any
                        number of characters.
                      type: string
                    boundSubject:
                      description: If set, requires that the sub claim matches this
                        value.
                      type: string
                    claimMappings:
                      additionalProperties:
                        type: string
                      description: If set, a map of claims (keys) to be copied to
                        specified metadata fields (values).
                      type: object
                    groupClaim:
                      description: The claim to use to uniquely identify the set of
                        groups to which the user belongs; this will be used as the
                        names for the Identity group aliases created due to a successful
                        login. The claim value must be a list of strings.
                      type: string
                    name:
                      description: 'Name of the role. This defaults to following format:
                        k8s.${cluster}.${metadata.namespace}.${metadata.name}'
                      type: string
                    oidcScopes:
                      description: If set, a list of OIDC scopes to be used with an
                        OIDC role. The standard scope "openid" is automatically included
                        and need not be specified.
                      items:
                        type: string
                      type: array
                    path:
                      description: 'Specifies the path where jwt/oidc auth is enabled
                        default : jwt'
                      type: string
                    roleType:
                      description: Type of role, either "oidc" (default) or "jwt".
                      type: string
                    tokenBoundCidrs:
                      description: List of CIDR blocks; if set, specifies blocks of
                        IP addresses which can authenticate successfully, and ties
                        the resulting token to these blocks as well.
                      items:
                        type: string
                      type: array
                    tokenExplicitMaxTTL:
                      description: If set, will encode an explicit max TTL onto the
                        token. This is a hard cap even if token_ttl and token_max_ttl
                        would otherwise allow a renewal.
                      format: int64
                      type: integer
                    tokenMaxTTL:
                      description: The maximum lifetime for generated tokens. This
                        current value of this will be referenced at renewal time.
                      format: int64
                      type: integer
                    tokenNoDefaultPolicy:
                      description: If set, the default policy will not be set on generated
                        tokens; otherwise it will be added to the policies set in
                        token_policies.
                      type: boolean
                    tokenNumUses:
                      description: The maximum number of times a generated token may
                        be used (within its lifetime); 0 means unlimited.
                      format: int64
                      type: integer
                    tokenPeriod:
                      description: The period, if any, to set on the token.
                      format: int64
                      type: integer
                    tokenPolicies:
                      description: List of policies to encode onto generated tokens.
                        Depending on the auth method, this list may be supplemented
                        by user/group/other values.
                      items:
                        type: string
                      type: array
                    tokenTTL:
                      description: The incremental lifetime for generated tokens.
                        This current value of this will be referenced at renewal time.
                      format: int64
                      type: integer
                    tokenType:
                      description: 'The type of token that should be generated. Can
                        be service, batch, or default to use the mount''s tuned default
                        (which unless changed will be service tokens). For token store
                        roles, there are two additional possibilities: default-service
                        and default-batch which specify the type to return unless
                        the client requests a different type at generation time.'
                      type: string
                    userClaim:
                      description: The claim to use to uniquely identify the user;
                        this will be used as the name for the Identity entity alias
                        created due to a successful login. The claim value must be
                        a string.
                      type: string
                    verboseOidcLogging:
                      type: boolean
                  required:
                  - allowedRedirectUris
                  - userClaim
                  type: object
                kubernetes:
                  description: 'Kubernetes refers to Vault users who are authenticated
                    via Kubernetes auth method More info: https://www.vaultproject.io/docs/auth/kubernetes.html#configuration'
                  properties:
                    maxTTL:
                      description: Specifies the maximum allowed lifetime of tokens
                        issued in seconds using this role.
                      type: string
                    name:
                      description: Name of the role
                      type: string
                    path:
                      description: 'Specifies the path where kubernetes auth is enabled
                        default : kubernetes'
                      type: string
                    period:
                      description: If set, indicates that the token generated using
                        this role should never expire. The token should be renewed
                        within the duration specified by this value. At each renewal,
                        the token's TTL will be set to the value of this parameter.
                      type: string
                    serviceAccountNames:
                      description: Specifies the names of the service account to bind
                        with policy
                      items:
                        type: string
                      type: array
                    serviceAccountNamespaces:
                      description: Specifies the namespaces of the service account
                      items:
                        type: string
                      type: array
                    ttl:
                      description: Specifies the TTL period of tokens issued using
                        this role in seconds.
                      type: string
                  required:
                  - serviceAccountNames
                  - serviceAccountNamespaces
                  type: object
                ldapGroup:
                  description: 'More info: https://www.vaultproject.io/api-docs/auth/ldap#configure-ldap'
                  properties:
                    name:
                      description: The name of the LDAP group
                      type: string
                    path:
                      description: 'Specifies the path where ldap groups auth is enabled
                        default : ldap/groups'
                      type: string
                    policies:
                      description: List of policies to encode onto generated tokens.
                        Depending on the auth method, this list may be supplemented
                        by user/group/other values.
                      items:
                        type: string
                      type: array
                  required:
                  - name
                  type: object
                ldapUser:
                  description: 'More info: https://www.vaultproject.io/api-docs/auth/ldap#create-update-ldap-user'
                  properties:
                    groups:
                      description: List of groups associated to the user.
                      items:
                        type: string
                      type: array
                    path:
                      description: 'Specifies the path where ldap groups auth is enabled
                        default : ldap/users'
                      type: string
                    policies:
                      description: List of policies to encode onto generated tokens.
                        Depending on the auth method, this list may be supplemented
                        by user/group/other values.
                      items:
                        type: string
                      type: array
                    username:
                      description: The username of the LDAP user
                      type: string
                  required:
                  - username
                  type: object
              type: object
            vaultRef:
              description: VaultRef is the name of a AppBinding referencing to a Vault
                Server
              properties:
                name:
                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                    TODO: Add other useful fields. apiVersion, kind, uid?'
                  type: string
              type: object
            vaultRoleName:
              description: 'VaultRoleName is the role name which will be bound of
                the policies This defaults to following format: k8s.${cluster}.${metadata.namespace}.${metadata.name}
                xref: https://www.vaultproject.io/api/auth/kubernetes/index.html#create-role'
              type: string
          required:
          - policies
          - subjectRef
          - vaultRef
          type: object
      type: object
