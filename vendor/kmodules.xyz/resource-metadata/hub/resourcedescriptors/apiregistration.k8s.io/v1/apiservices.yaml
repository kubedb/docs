apiVersion: meta.appscode.com/v1alpha1
kind: ResourceDescriptor
metadata:
  creationTimestamp: null
  labels:
    k8s.io/group: apiregistration.k8s.io
    k8s.io/kind: APIService
    k8s.io/resource: apiservices
    k8s.io/version: v1
  name: apiregistration.k8s.io-v1-apiservices
spec:
  icons:
  - src: https://cdn.appscode.com/k8s/icons/apiregistration.k8s.io/apiservices.svg
    type: image/svg+xml
  - src: https://cdn.appscode.com/k8s/icons/apiregistration.k8s.io/apiservices.png
    type: image/png
  resource:
    group: apiregistration.k8s.io
    kind: APIService
    name: apiservices
    scope: Cluster
    version: v1
  ui:
    editor:
      name: apiregistrationk8sio-apiservice-editor
      url: https://bundles.byte.builders/ui/
      version: v0.2.0
  validation:
    openAPIV3Schema:
      description: APIService represents a server for a particular GroupVersion. Name
        must be "version.group".
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          properties:
            name:
              description: 'Name must be unique within a namespace. Is required when
                creating resources, although some resources may allow a client to
                request the generation of an appropriate name automatically. Name
                is primarily intended for creation idempotence and configuration definition.
                Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names'
              type: string
            labels:
              additionalProperties:
                type: string
              description: 'Map of string keys and values that can be used to organize
                and categorize (scope and select) objects. May match selectors of
                replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels'
              type: object
            annotations:
              additionalProperties:
                type: string
              description: 'Annotations is an unstructured key value map stored with
                a resource that may be set by external tools to store and retrieve
                arbitrary metadata. They are not queryable and should be preserved
                when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations'
              type: object
          type: object
        spec:
          description: Spec contains information for locating and communicating with
            a server
          properties:
            caBundle:
              description: CABundle is a PEM encoded CA bundle which will be used
                to validate an API server's serving certificate. If unspecified, system
                trust roots on the apiserver are used.
              format: byte
              type: string
            group:
              description: Group is the API group name this server hosts
              type: string
            groupPriorityMinimum:
              description: 'GroupPriorityMininum is the priority this group should
                have at least. Higher priority means that the group is preferred by
                clients over lower priority ones. Note that other versions of this
                group might specify even higher GroupPriorityMininum values such that
                the whole group gets a higher priority. The primary sort is based
                on GroupPriorityMinimum, ordered highest number to lowest (20 before
                10). The secondary sort is based on the alphabetical comparison of
                the name of the object.  (v1.bar before v1.foo) We''d recommend something
                like: *.k8s.io (except extensions) at 18000 and PaaSes (OpenShift,
                Deis) are recommended to be in the 2000s'
              format: int32
              type: integer
            insecureSkipTLSVerify:
              description: InsecureSkipTLSVerify disables TLS certificate verification
                when communicating with this server. This is strongly discouraged.  You
                should use the CABundle instead.
              type: boolean
            service:
              description: Service is a reference to the service for this API server.  It
                must communicate on port 443. If the Service is nil, that means the
                handling for the API groupversion is handled locally on this server.
                The call will simply delegate to the normal handler chain to be fulfilled.
              properties:
                name:
                  description: Name is the name of the service
                  type: string
                namespace:
                  description: Namespace is the namespace of the service
                  type: string
                port:
                  description: If specified, the port on the service that hosting
                    webhook. Default to 443 for backward compatibility. `port` should
                    be a valid port number (1-65535, inclusive).
                  format: int32
                  type: integer
              type: object
            version:
              description: Version is the API version this server hosts.  For example,
                "v1"
              type: string
            versionPriority:
              description: 'VersionPriority controls the ordering of this API version
                inside of its group.  Must be greater than zero. The primary sort
                is based on VersionPriority, ordered highest to lowest (20 before
                10). Since it''s inside of a group, the number can be small, probably
                in the 10s. In case of equal version priorities, the version string
                will be used to compute the order inside a group. If the version string
                is "kube-like", it will sort above non "kube-like" version strings,
                which are ordered lexicographically. "Kube-like" versions start with
                a "v", then are followed by a number (the major version), then optionally
                the string "alpha" or "beta" and another number (the minor version).
                These are sorted first by GA > beta > alpha (where GA is a version
                with no suffix such as beta or alpha), and then by comparing major
                version, then minor version. An example sorted list of versions: v10,
                v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10.'
              format: int32
              type: integer
          required:
          - groupPriorityMinimum
          - versionPriority
          type: object
      type: object
