/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kmodules.xyz/custom-resources/apis/appcatalog/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AppBindingLister helps list AppBindings.
// All objects returned here must be treated as read-only.
type AppBindingLister interface {
	// List lists all AppBindings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AppBinding, err error)
	// AppBindings returns an object that can list and get AppBindings.
	AppBindings(namespace string) AppBindingNamespaceLister
	AppBindingListerExpansion
}

// appBindingLister implements the AppBindingLister interface.
type appBindingLister struct {
	indexer cache.Indexer
}

// NewAppBindingLister returns a new AppBindingLister.
func NewAppBindingLister(indexer cache.Indexer) AppBindingLister {
	return &appBindingLister{indexer: indexer}
}

// List lists all AppBindings in the indexer.
func (s *appBindingLister) List(selector labels.Selector) (ret []*v1alpha1.AppBinding, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AppBinding))
	})
	return ret, err
}

// AppBindings returns an object that can list and get AppBindings.
func (s *appBindingLister) AppBindings(namespace string) AppBindingNamespaceLister {
	return appBindingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AppBindingNamespaceLister helps list and get AppBindings.
// All objects returned here must be treated as read-only.
type AppBindingNamespaceLister interface {
	// List lists all AppBindings in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AppBinding, err error)
	// Get retrieves the AppBinding from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AppBinding, error)
	AppBindingNamespaceListerExpansion
}

// appBindingNamespaceLister implements the AppBindingNamespaceLister
// interface.
type appBindingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AppBindings in the indexer for a given namespace.
func (s appBindingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AppBinding, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AppBinding))
	})
	return ret, err
}

// Get retrieves the AppBinding from the indexer for a given namespace and name.
func (s appBindingNamespaceLister) Get(name string) (*v1alpha1.AppBinding, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("appbinding"), name)
	}
	return obj.(*v1alpha1.AppBinding), nil
}
