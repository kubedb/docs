/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubedb.dev/apimachinery/apis/ops/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RedisOpsRequestLister helps list RedisOpsRequests.
// All objects returned here must be treated as read-only.
type RedisOpsRequestLister interface {
	// List lists all RedisOpsRequests in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RedisOpsRequest, err error)
	// RedisOpsRequests returns an object that can list and get RedisOpsRequests.
	RedisOpsRequests(namespace string) RedisOpsRequestNamespaceLister
	RedisOpsRequestListerExpansion
}

// redisOpsRequestLister implements the RedisOpsRequestLister interface.
type redisOpsRequestLister struct {
	indexer cache.Indexer
}

// NewRedisOpsRequestLister returns a new RedisOpsRequestLister.
func NewRedisOpsRequestLister(indexer cache.Indexer) RedisOpsRequestLister {
	return &redisOpsRequestLister{indexer: indexer}
}

// List lists all RedisOpsRequests in the indexer.
func (s *redisOpsRequestLister) List(selector labels.Selector) (ret []*v1alpha1.RedisOpsRequest, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RedisOpsRequest))
	})
	return ret, err
}

// RedisOpsRequests returns an object that can list and get RedisOpsRequests.
func (s *redisOpsRequestLister) RedisOpsRequests(namespace string) RedisOpsRequestNamespaceLister {
	return redisOpsRequestNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RedisOpsRequestNamespaceLister helps list and get RedisOpsRequests.
// All objects returned here must be treated as read-only.
type RedisOpsRequestNamespaceLister interface {
	// List lists all RedisOpsRequests in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RedisOpsRequest, err error)
	// Get retrieves the RedisOpsRequest from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.RedisOpsRequest, error)
	RedisOpsRequestNamespaceListerExpansion
}

// redisOpsRequestNamespaceLister implements the RedisOpsRequestNamespaceLister
// interface.
type redisOpsRequestNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RedisOpsRequests in the indexer for a given namespace.
func (s redisOpsRequestNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RedisOpsRequest, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RedisOpsRequest))
	})
	return ret, err
}

// Get retrieves the RedisOpsRequest from the indexer for a given namespace and name.
func (s redisOpsRequestNamespaceLister) Get(name string) (*v1alpha1.RedisOpsRequest, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("redisopsrequest"), name)
	}
	return obj.(*v1alpha1.RedisOpsRequest), nil
}
