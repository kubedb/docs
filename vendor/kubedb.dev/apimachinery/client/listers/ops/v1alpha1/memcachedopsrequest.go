/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubedb.dev/apimachinery/apis/ops/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MemcachedOpsRequestLister helps list MemcachedOpsRequests.
// All objects returned here must be treated as read-only.
type MemcachedOpsRequestLister interface {
	// List lists all MemcachedOpsRequests in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MemcachedOpsRequest, err error)
	// MemcachedOpsRequests returns an object that can list and get MemcachedOpsRequests.
	MemcachedOpsRequests(namespace string) MemcachedOpsRequestNamespaceLister
	MemcachedOpsRequestListerExpansion
}

// memcachedOpsRequestLister implements the MemcachedOpsRequestLister interface.
type memcachedOpsRequestLister struct {
	indexer cache.Indexer
}

// NewMemcachedOpsRequestLister returns a new MemcachedOpsRequestLister.
func NewMemcachedOpsRequestLister(indexer cache.Indexer) MemcachedOpsRequestLister {
	return &memcachedOpsRequestLister{indexer: indexer}
}

// List lists all MemcachedOpsRequests in the indexer.
func (s *memcachedOpsRequestLister) List(selector labels.Selector) (ret []*v1alpha1.MemcachedOpsRequest, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MemcachedOpsRequest))
	})
	return ret, err
}

// MemcachedOpsRequests returns an object that can list and get MemcachedOpsRequests.
func (s *memcachedOpsRequestLister) MemcachedOpsRequests(namespace string) MemcachedOpsRequestNamespaceLister {
	return memcachedOpsRequestNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MemcachedOpsRequestNamespaceLister helps list and get MemcachedOpsRequests.
// All objects returned here must be treated as read-only.
type MemcachedOpsRequestNamespaceLister interface {
	// List lists all MemcachedOpsRequests in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MemcachedOpsRequest, err error)
	// Get retrieves the MemcachedOpsRequest from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.MemcachedOpsRequest, error)
	MemcachedOpsRequestNamespaceListerExpansion
}

// memcachedOpsRequestNamespaceLister implements the MemcachedOpsRequestNamespaceLister
// interface.
type memcachedOpsRequestNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MemcachedOpsRequests in the indexer for a given namespace.
func (s memcachedOpsRequestNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MemcachedOpsRequest, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MemcachedOpsRequest))
	})
	return ret, err
}

// Get retrieves the MemcachedOpsRequest from the indexer for a given namespace and name.
func (s memcachedOpsRequestNamespaceLister) Get(name string) (*v1alpha1.MemcachedOpsRequest, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("memcachedopsrequest"), name)
	}
	return obj.(*v1alpha1.MemcachedOpsRequest), nil
}
