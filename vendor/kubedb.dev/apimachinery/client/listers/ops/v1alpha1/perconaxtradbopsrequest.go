/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubedb.dev/apimachinery/apis/ops/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PerconaXtraDBOpsRequestLister helps list PerconaXtraDBOpsRequests.
// All objects returned here must be treated as read-only.
type PerconaXtraDBOpsRequestLister interface {
	// List lists all PerconaXtraDBOpsRequests in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PerconaXtraDBOpsRequest, err error)
	// PerconaXtraDBOpsRequests returns an object that can list and get PerconaXtraDBOpsRequests.
	PerconaXtraDBOpsRequests(namespace string) PerconaXtraDBOpsRequestNamespaceLister
	PerconaXtraDBOpsRequestListerExpansion
}

// perconaXtraDBOpsRequestLister implements the PerconaXtraDBOpsRequestLister interface.
type perconaXtraDBOpsRequestLister struct {
	indexer cache.Indexer
}

// NewPerconaXtraDBOpsRequestLister returns a new PerconaXtraDBOpsRequestLister.
func NewPerconaXtraDBOpsRequestLister(indexer cache.Indexer) PerconaXtraDBOpsRequestLister {
	return &perconaXtraDBOpsRequestLister{indexer: indexer}
}

// List lists all PerconaXtraDBOpsRequests in the indexer.
func (s *perconaXtraDBOpsRequestLister) List(selector labels.Selector) (ret []*v1alpha1.PerconaXtraDBOpsRequest, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PerconaXtraDBOpsRequest))
	})
	return ret, err
}

// PerconaXtraDBOpsRequests returns an object that can list and get PerconaXtraDBOpsRequests.
func (s *perconaXtraDBOpsRequestLister) PerconaXtraDBOpsRequests(namespace string) PerconaXtraDBOpsRequestNamespaceLister {
	return perconaXtraDBOpsRequestNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PerconaXtraDBOpsRequestNamespaceLister helps list and get PerconaXtraDBOpsRequests.
// All objects returned here must be treated as read-only.
type PerconaXtraDBOpsRequestNamespaceLister interface {
	// List lists all PerconaXtraDBOpsRequests in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PerconaXtraDBOpsRequest, err error)
	// Get retrieves the PerconaXtraDBOpsRequest from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.PerconaXtraDBOpsRequest, error)
	PerconaXtraDBOpsRequestNamespaceListerExpansion
}

// perconaXtraDBOpsRequestNamespaceLister implements the PerconaXtraDBOpsRequestNamespaceLister
// interface.
type perconaXtraDBOpsRequestNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PerconaXtraDBOpsRequests in the indexer for a given namespace.
func (s perconaXtraDBOpsRequestNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PerconaXtraDBOpsRequest, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PerconaXtraDBOpsRequest))
	})
	return ret, err
}

// Get retrieves the PerconaXtraDBOpsRequest from the indexer for a given namespace and name.
func (s perconaXtraDBOpsRequestNamespaceLister) Get(name string) (*v1alpha1.PerconaXtraDBOpsRequest, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("perconaxtradbopsrequest"), name)
	}
	return obj.(*v1alpha1.PerconaXtraDBOpsRequest), nil
}
