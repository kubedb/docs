/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubedb.dev/apimachinery/apis/autoscaling/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EtcdAutoscalerLister helps list EtcdAutoscalers.
// All objects returned here must be treated as read-only.
type EtcdAutoscalerLister interface {
	// List lists all EtcdAutoscalers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EtcdAutoscaler, err error)
	// EtcdAutoscalers returns an object that can list and get EtcdAutoscalers.
	EtcdAutoscalers(namespace string) EtcdAutoscalerNamespaceLister
	EtcdAutoscalerListerExpansion
}

// etcdAutoscalerLister implements the EtcdAutoscalerLister interface.
type etcdAutoscalerLister struct {
	indexer cache.Indexer
}

// NewEtcdAutoscalerLister returns a new EtcdAutoscalerLister.
func NewEtcdAutoscalerLister(indexer cache.Indexer) EtcdAutoscalerLister {
	return &etcdAutoscalerLister{indexer: indexer}
}

// List lists all EtcdAutoscalers in the indexer.
func (s *etcdAutoscalerLister) List(selector labels.Selector) (ret []*v1alpha1.EtcdAutoscaler, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EtcdAutoscaler))
	})
	return ret, err
}

// EtcdAutoscalers returns an object that can list and get EtcdAutoscalers.
func (s *etcdAutoscalerLister) EtcdAutoscalers(namespace string) EtcdAutoscalerNamespaceLister {
	return etcdAutoscalerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EtcdAutoscalerNamespaceLister helps list and get EtcdAutoscalers.
// All objects returned here must be treated as read-only.
type EtcdAutoscalerNamespaceLister interface {
	// List lists all EtcdAutoscalers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EtcdAutoscaler, err error)
	// Get retrieves the EtcdAutoscaler from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.EtcdAutoscaler, error)
	EtcdAutoscalerNamespaceListerExpansion
}

// etcdAutoscalerNamespaceLister implements the EtcdAutoscalerNamespaceLister
// interface.
type etcdAutoscalerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EtcdAutoscalers in the indexer for a given namespace.
func (s etcdAutoscalerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.EtcdAutoscaler, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EtcdAutoscaler))
	})
	return ret, err
}

// Get retrieves the EtcdAutoscaler from the indexer for a given namespace and name.
func (s etcdAutoscalerNamespaceLister) Get(name string) (*v1alpha1.EtcdAutoscaler, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("etcdautoscaler"), name)
	}
	return obj.(*v1alpha1.EtcdAutoscaler), nil
}
