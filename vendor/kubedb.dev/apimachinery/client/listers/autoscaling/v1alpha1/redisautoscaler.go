/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubedb.dev/apimachinery/apis/autoscaling/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RedisAutoscalerLister helps list RedisAutoscalers.
// All objects returned here must be treated as read-only.
type RedisAutoscalerLister interface {
	// List lists all RedisAutoscalers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RedisAutoscaler, err error)
	// RedisAutoscalers returns an object that can list and get RedisAutoscalers.
	RedisAutoscalers(namespace string) RedisAutoscalerNamespaceLister
	RedisAutoscalerListerExpansion
}

// redisAutoscalerLister implements the RedisAutoscalerLister interface.
type redisAutoscalerLister struct {
	indexer cache.Indexer
}

// NewRedisAutoscalerLister returns a new RedisAutoscalerLister.
func NewRedisAutoscalerLister(indexer cache.Indexer) RedisAutoscalerLister {
	return &redisAutoscalerLister{indexer: indexer}
}

// List lists all RedisAutoscalers in the indexer.
func (s *redisAutoscalerLister) List(selector labels.Selector) (ret []*v1alpha1.RedisAutoscaler, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RedisAutoscaler))
	})
	return ret, err
}

// RedisAutoscalers returns an object that can list and get RedisAutoscalers.
func (s *redisAutoscalerLister) RedisAutoscalers(namespace string) RedisAutoscalerNamespaceLister {
	return redisAutoscalerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RedisAutoscalerNamespaceLister helps list and get RedisAutoscalers.
// All objects returned here must be treated as read-only.
type RedisAutoscalerNamespaceLister interface {
	// List lists all RedisAutoscalers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RedisAutoscaler, err error)
	// Get retrieves the RedisAutoscaler from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.RedisAutoscaler, error)
	RedisAutoscalerNamespaceListerExpansion
}

// redisAutoscalerNamespaceLister implements the RedisAutoscalerNamespaceLister
// interface.
type redisAutoscalerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RedisAutoscalers in the indexer for a given namespace.
func (s redisAutoscalerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RedisAutoscaler, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RedisAutoscaler))
	})
	return ret, err
}

// Get retrieves the RedisAutoscaler from the indexer for a given namespace and name.
func (s redisAutoscalerNamespaceLister) Get(name string) (*v1alpha1.RedisAutoscaler, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("redisautoscaler"), name)
	}
	return obj.(*v1alpha1.RedisAutoscaler), nil
}
