/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "stash.appscode.dev/apimachinery/apis/stash/v1beta1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RestoreBatchLister helps list RestoreBatches.
// All objects returned here must be treated as read-only.
type RestoreBatchLister interface {
	// List lists all RestoreBatches in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.RestoreBatch, err error)
	// RestoreBatches returns an object that can list and get RestoreBatches.
	RestoreBatches(namespace string) RestoreBatchNamespaceLister
	RestoreBatchListerExpansion
}

// restoreBatchLister implements the RestoreBatchLister interface.
type restoreBatchLister struct {
	indexer cache.Indexer
}

// NewRestoreBatchLister returns a new RestoreBatchLister.
func NewRestoreBatchLister(indexer cache.Indexer) RestoreBatchLister {
	return &restoreBatchLister{indexer: indexer}
}

// List lists all RestoreBatches in the indexer.
func (s *restoreBatchLister) List(selector labels.Selector) (ret []*v1beta1.RestoreBatch, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.RestoreBatch))
	})
	return ret, err
}

// RestoreBatches returns an object that can list and get RestoreBatches.
func (s *restoreBatchLister) RestoreBatches(namespace string) RestoreBatchNamespaceLister {
	return restoreBatchNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RestoreBatchNamespaceLister helps list and get RestoreBatches.
// All objects returned here must be treated as read-only.
type RestoreBatchNamespaceLister interface {
	// List lists all RestoreBatches in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.RestoreBatch, err error)
	// Get retrieves the RestoreBatch from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.RestoreBatch, error)
	RestoreBatchNamespaceListerExpansion
}

// restoreBatchNamespaceLister implements the RestoreBatchNamespaceLister
// interface.
type restoreBatchNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RestoreBatches in the indexer for a given namespace.
func (s restoreBatchNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.RestoreBatch, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.RestoreBatch))
	})
	return ret, err
}

// Get retrieves the RestoreBatch from the indexer for a given namespace and name.
func (s restoreBatchNamespaceLister) Get(name string) (*v1beta1.RestoreBatch, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("restorebatch"), name)
	}
	return obj.(*v1beta1.RestoreBatch), nil
}
