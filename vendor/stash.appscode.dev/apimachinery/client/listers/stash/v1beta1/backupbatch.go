/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "stash.appscode.dev/apimachinery/apis/stash/v1beta1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BackupBatchLister helps list BackupBatches.
// All objects returned here must be treated as read-only.
type BackupBatchLister interface {
	// List lists all BackupBatches in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.BackupBatch, err error)
	// BackupBatches returns an object that can list and get BackupBatches.
	BackupBatches(namespace string) BackupBatchNamespaceLister
	BackupBatchListerExpansion
}

// backupBatchLister implements the BackupBatchLister interface.
type backupBatchLister struct {
	indexer cache.Indexer
}

// NewBackupBatchLister returns a new BackupBatchLister.
func NewBackupBatchLister(indexer cache.Indexer) BackupBatchLister {
	return &backupBatchLister{indexer: indexer}
}

// List lists all BackupBatches in the indexer.
func (s *backupBatchLister) List(selector labels.Selector) (ret []*v1beta1.BackupBatch, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.BackupBatch))
	})
	return ret, err
}

// BackupBatches returns an object that can list and get BackupBatches.
func (s *backupBatchLister) BackupBatches(namespace string) BackupBatchNamespaceLister {
	return backupBatchNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BackupBatchNamespaceLister helps list and get BackupBatches.
// All objects returned here must be treated as read-only.
type BackupBatchNamespaceLister interface {
	// List lists all BackupBatches in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.BackupBatch, err error)
	// Get retrieves the BackupBatch from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.BackupBatch, error)
	BackupBatchNamespaceListerExpansion
}

// backupBatchNamespaceLister implements the BackupBatchNamespaceLister
// interface.
type backupBatchNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BackupBatches in the indexer for a given namespace.
func (s backupBatchNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.BackupBatch, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.BackupBatch))
	})
	return ret, err
}

// Get retrieves the BackupBatch from the indexer for a given namespace and name.
func (s backupBatchNamespaceLister) Get(name string) (*v1beta1.BackupBatch, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("backupbatch"), name)
	}
	return obj.(*v1beta1.BackupBatch), nil
}
